name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Job 1: Linting y validaciÃ³n de cÃ³digo
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Ensure pip cache directory exists
        run: mkdir -p ~/.cache/pip

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install flake8 black isort mypy

      - name: Run Black (code formatting)
        run: black --check --diff .

      - name: Run isort (import sorting)
        run: isort --check-only --diff .

      - name: Run flake8 (linting)
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Run mypy (type checking)
        run: mypy sdk/ tools/ examples/ --ignore-missing-imports

  # Job 2: Testing Python
  test-python:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Ensure pip cache directory exists
        run: mkdir -p ~/.cache/pip

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements*.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pytest pytest-cov pytest-asyncio

      - name: Run Python tests
        run: |
          pytest tests/ -v --cov=sdk --cov=tools --cov=examples --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: python
          name: python-coverage

  # Job 3: Testing JavaScript
  test-javascript:
    name: JavaScript Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Ensure npm cache directory exists
        run: mkdir -p ~/.npm

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: js/package-lock.json

      - name: Install JavaScript dependencies
        working-directory: js
        run: npm ci

      - name: Run JavaScript linting
        working-directory: js
        run: npm run lint

      - name: Run JavaScript tests
        working-directory: js
        run: npm test -- --coverage

      - name: Upload JS coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./js/coverage/lcov.info
          flags: javascript
          name: javascript-coverage

  # Job 4: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-python, test-javascript]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio

      - name: Start FastAPI server
        run: |
          python -m uvicorn examples.fastapi_mcp_integration:app --host 0.0.0.0 --port 8000 &
          sleep 10

      - name: Run integration tests
        run: |
          python examples/test_fastapi_mcp.py
          python examples/demo_atdf_errors.py

      - name: Test API endpoints
        run: |
          curl -f http://localhost:8000/ || exit 1
          curl -f http://localhost:8000/tools || exit 1

  # Job 5: Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: Run safety check (dependencies)
        run: safety check --json

      - name: Run bandit (security linting)
        run: bandit -r sdk/ tools/ examples/ -f json

  # Job 6: Build and Test Docker
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [lint, test-python]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: atdf:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d -p 8000:8000 --name atdf-test atdf:test
          sleep 10
          curl -f http://localhost:8000/ || exit 1
          docker stop atdf-test

  # Job 7: Deploy (solo en main)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [integration-tests, security, docker]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "ðŸš€ Deploying to staging environment..."
          # AquÃ­ se agregarÃ­an los comandos de deployment real
          echo "âœ… Deployment completed successfully"

  # Job 8: Release (solo en tags)
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [integration-tests, security, docker]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false